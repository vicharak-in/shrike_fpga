// ---------------------------------------------------------------------------
// Â© 2024 Renesas Electronics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
// OR OTHER DEALINGS IN THE SOFTWARE.
// ---------------------------------------------------------------------------
// Base Module Name: uart_transceiver_tb
// Tool version:
//   Software: ForgeFPGA Workshop v6.31
// Revision:
//   05.11.2021 r001 - New test bench design
//   09.16.2022 r002 - Code style review
// ---------------------------------------------------------------------------

`timescale 1ps/1ps

module uart_transceiver_tb;
  //Parameters
  parameter IN_CLK_HZ         = 50_000_000;
  parameter DATA_FRAME        = 8;
  parameter BAUD_RATE         = 115_200;
  parameter OVERSAMPLING_MODE = 16;
  parameter STOP_BIT          = 1;
  parameter LSB               = 1'b0;
  //Inputs
  reg                  r_clk      = 1'b0;
  reg                  r_rst      = 1'b1;
  reg [DATA_FRAME-1:0] r_tx_data  = 8'h00;
  reg                  r_tx_start = 1'b0;
  reg                  r_rx       = 1'b0;
  //Outputs
  wire                  w_tx;
  wire                  w_tx_done;
  wire [DATA_FRAME-1:0] w_rx_data;
  wire                  w_rx_done;

  localparam CLK_PERIOD = 20;
  localparam BIT_PERIOD = 8_600;

// Module transmit and receive data by UART
  uart_transceiver #(
    .IN_CLK_HZ         (IN_CLK_HZ),
    .DATA_FRAME        (DATA_FRAME),
    .BAUD_RATE         (BAUD_RATE),
    .OVERSAMPLING_MODE (OVERSAMPLING_MODE),
    .STOP_BIT          (STOP_BIT),
    .LSB               (LSB)
  ) dut (
    .i_clk             (r_clk),
    .i_rst             (r_rst),
    .i_tx_start        (r_tx_start),
    .i_tx_data         (r_tx_data),
    .o_tx              (w_tx),
    .o_tx_done         (w_tx_done),
    .i_rx              (r_rx),
    .o_rx_data         (w_rx_data),
    .o_rx_done         (w_rx_done)
  );
  
  always # (CLK_PERIOD/2) r_clk = ~r_clk;

// Task to write serial byte
  task UART_WRITE_BYTE;
    input [DATA_FRAME-1:0] i_data;
    integer i;
    begin
      r_rx <= 1'b0;
      #(BIT_PERIOD);
      #1000;
      for (i = 0; i < DATA_FRAME; i = i + 1) begin
        if (LSB) begin
          r_rx <= i_data[DATA_FRAME - i - 1];
        end else begin
          r_rx <= i_data[i];
        end
        #(BIT_PERIOD);
      end
      r_rx <= 1'b1;
      #(BIT_PERIOD);
    end
  endtask

  initial begin
    $dumpfile ("uart_transceiver_tb.vcd");
    $dumpvars (0, uart_transceiver_tb);

    r_clk      <= 1'b0;
    r_rst      <= 1'b1;
    r_rx       <= 1'b1;
    r_tx_start <= 1'b0;
    r_tx_data  <= 8'h05;
    @(posedge r_clk)
    UART_WRITE_BYTE(8'h04);
    #1000;
    @(posedge r_clk) UART_WRITE_BYTE(8'hF5);
    #10 r_rst <= 1'b0;
    @(posedge r_clk) UART_WRITE_BYTE(8'h04);
    #1000;
    @(posedge r_clk) UART_WRITE_BYTE(8'hF5);
    #10 r_tx_start <= 1'b1;
    #30 r_tx_start <= 1'b0;
    #100000 $finish;
  end

endmodule

