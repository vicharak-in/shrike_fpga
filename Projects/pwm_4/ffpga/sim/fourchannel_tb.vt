// Custom testbench

`timescale 1ns / 1ps

module tb_DemoSequentialBreathing;

  reg clk;
  reg nreset;

  wire led_0, led_1, led_2, led_3;
  wire led_4, led_5, led_6, led_7;

  wire led0_oe, led1_oe, led2_oe, led3_oe;
  wire led4_oe, led5_oe, led6_oe, led7_oe;
  wire osc_en;

  // Instantiate the DUT
  DemoSequentialBreathing #(
    .IN_CLK_HZ(500_000_000),
    .DEPTH(8)
  ) dut (
    .clk(clk),
    .nreset(nreset),
    .osc_en(osc_en),
    .led_0(led_0), .led0_oe(led0_oe),
    .led_1(led_1), .led1_oe(led1_oe),
    .led_2(led_2), .led2_oe(led2_oe),
    .led_3(led_3), .led3_oe(led3_oe),
    .led_4(led_4), .led4_oe(led4_oe),
    .led_5(led_5), .led5_oe(led5_oe),
    .led_6(led_6), .led6_oe(led6_oe),
    .led_7(led_7), .led7_oe(led7_oe)
  );

  // Clock: 50 MHz -> 20ns period
  initial clk = 0;
  always #1 clk = ~clk;

  initial begin
    // Dumpfile for GTKWave
    $dumpfile("tb_DemoSequentialBreathing.vcd");
    $dumpvars(0, tb_DemoSequentialBreathing);

    // Initialize
    nreset = 0;

    // Hold reset for a while
    #100;
    nreset = 1;
    // Run long enough to see at least one full cycle of sequential LEDs
    #(2_000_000_000);  // ~2 seconds of sim time

    $display("Simulation finished");
    $finish;
  end

endmodule
